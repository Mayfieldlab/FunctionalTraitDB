library("RSQLite")
setwd("test_trait_database")
?cdConnect
?ddConnect
?dbConnect
con <- dbConnect(drv="SQLite", dbname="test.trait.db")
con <- dbConnect(drv="SQLite", dbname="test.trait.sqlite")
setwd("test_trait_database")
con <- dbConnect(drv="SQLite", dbname="test.trait.db")
con <- dbConnect(SQLite, dbname="test.trait.db")
con <- dbConnect("SQLiteDriver", dbname="test.trait.db")
library("DBI")
con <- DBI::dbConnect("SQLiteDriver", dbname="test.trait.db")
con <- dbConnect(RSQLite::SQLite(), dbname="test.trait.db")
alltables <- dbListTables(con)
alltables
con <- dbConnect(RSQLite::SQLite(), dbname="test.trait")
alltables <- dbListTables(con)
alltables
con <- dbConnect(RSQLite::SQLite(), dbname="test_trait")
con <- dbConnect(RSQLite::SQLite(), dbname="test_trait.db")
alltables <- dbListTables(con)
alltables
p1 <- dbGetQuery( con,'select * from family' )
p1
class(p1)
p2 <- dbGetQuery( con,'select count(*) from site' )
p2
p1 <- dbGetQuery( con,'select * from field_season' )
p1
p3 <- dbGetQuery(con, "SELECT field_season WHERE year == '2018'")
p3 <- dbGetQuery(con, "SELECT * from field_season WHERE year == '2018'")
p3
p3 <- dbGetQuery(con, "SELECT year from field_season WHERE 'year' == '2018'")
p3
p3 <- dbGetQuery(con, "SELECT year from field_season")
p3
p4 <- dbGetQuery(con, "SELECT * from field_season WHERE year LIKE '%2018r%'")
p4
p4 <- dbGetQuery(con, "SELECT * from field_season WHERE year LIKE '%2018%'")
p4
p4 <- dbGetQuery(con, "SELECT * from field_season WHERE year LIKE '2018'")
p4
p4 <- dbGetQuery(con, "SELECT * from field_season WHERE year LIKE 2018")
p4
p4 <- dbGetQuery(con, "SELECT * from field_season WHERE year LIKE 2018%")
p4 <- dbGetQuery(con, "SELECT * from field_season WHERE year LIKE '2018%'")
p4
p3 <- dbGetQuery(con, "SELECT year FROM field_season")
p3
p4 <- dbGetQuery(con, "SELECT * from field_season WHERE year LIKE '2017'")
p4
p4 <- dbGetQuery(con, "SELECT * from field_season WHERE year LIKE '2016'")
p4
p2 <- dbGetQuery( con,'SELECT COUNT(*) FROM field_season' )
p2
library("sqldf")
install.packages("sqldf")
home_dir<-getwd()
home_dir
setwd("test_trait_database")
system("mkdir testing_R_db")
setwd("testing_R_db")
db <- dbConnect(SQLite(), dbname="Test.sqlite")
# notes on creating a database from https://www.r-bloggers.com/r-and-sqlite-part-1/
library(RSQLite)
library(DBI)
library(sqldf)
## extract the home directory
home_dir<-getwd()
## set the working directory
setwd("test_trait_database")
## make a new folder to test R creating databases in
# system("mkdir testing_R_db")
## reset the working directory
setwd("testing_R_db")
db <- dbConnect(SQLite(), dbname="Test.sqlite")
sqldf(“attach ‘Test1.sqlite’ as new”)
db <- dbConnect(SQLite(), dbname="Test.sqlite")
sqldf("attach 'Test1.sqlite' as new")
dbSendQuery(conn = db, "CREATE TABLE School (SchID INTEGER, Location TEXT,
Authority TEXT, SchSize TEXT)")
dbSendQuery(conn = db, "INSERT INTO School VALUES (1, 'urban', 'state', 'medium')")
dbSendQuery(conn = db, "INSERT INTO School VALUES (2, 'urban', 'independent', 'large')")
dbSendQuery(conn = db, "INSERT INTO School VALUES (3, 'rural', 'state', 'small')")
dbListTables(db)
library(RSQLite)
library(DBI)
library(sqldf)
setwd("test_trait_database")
setwd("testing_R_db")
db <- dbConnect(SQLite(), dbname="Test.sqlite")
dbListTables(db)
dbListFields(db, "School")
dbReadTable(db, "School")
dbRemoveTable(db, "School")
dbWriteTable(conn = db, name = "Student", value = "student.csv",
row.names = FALSE, header = TRUE)
dbWriteTable(conn = db, name = "Class", value = "class.csv",
row.names = FALSE, header = TRUE)
dbWriteTable(conn = db, name = "School", value = "school.csv",
row.names = FALSE, header = TRUE)
dbListTables(db)
dbListFields(db, "School")
dbReadTable(db, "School")
dbRemoveTable(db, "School")   # Remove the tables
dbRemoveTable(db, "Class")
dbRemoveTable(db, "Student")
School <- read.csv("school.csv")  # Read csv files into R
Class <- read.csv("class.csv")
Student <- read.csv("student.csv")
dbWriteTable(conn = db, name = "Student", value = Student, row.names = FALSE)
dbWriteTable(conn = db, name = "Class", value = Class, row.names = FALSE)
dbWriteTable(conn = db, name = "School", value = School, row.names = FALSE)
dbListTables(db)                 # The tables in the database
dbListFields(db, "School")       # The columns in a table
dbReadTable(db, "School")        # The data in a table
dbSendQuery(db, "SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'School' and COLUMN_NAME = 'schID)
dbSendQuery(db, "SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'School' and COLUMN_NAME = 'schID")
dbSendQuery(db, "SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'School' and COLUMN_NAME = 'schID' ")
dbSendQuery(db, "SELECT DATA_TYPE FROM School")
dbSendQuery(db, "SHOW COLUMNS FROM 'School'")
dbSendQuery(db, "PRAGMA table_info(School)")
dbSendQuery(db, "PRAGMA table_info('School')")
?dbWriteTable
?dbWriteTable
dbWriteTable(conn = db, name = "Student", value = Student, row.names = FALSE, field.types = c("PRIMARY KEY","INT","TEXT","INT","INT"))
dbRemoveTable(db, "Student")
dbWriteTable(conn = db, name = "Student", value = Student, row.names = FALSE, field.types = c("PRIMARY KEY","INT","TEXT","INT","INT"))
School <- read.csv("school.csv")  # Read csv files into R
student
Student
dbSendQuery(dd, "SELECT * FROM School CROSS JOIN Student")
dbSendQuery(db, "SELECT * FROM School CROSS JOIN Student")
dbWriteTable(conn = db, name = "Student", value = Student, row.names = FALSE)
dbSendQuery(db, "SELECT * FROM School CROSS JOIN Student")
dbReadTable(db, "School")        # The data in a table
dbGETQuery(db, "SELECT * FROM School CROSS JOIN Student")
dbGetQuery(db, "SELECT * FROM School CROSS JOIN Student")
dbGetQuery(db, "SELECT * FROM School CROSS JOIN Student WHERE Gender = 'female' ")
dbGetQuery(db, "SELECT * FROM School [INNER] JOIN Student WHERE Gender = 'female' ")
db <- dbConnect(SQLite(), dbname="Test.species.sqlite")
dbWriteTable(conn = db, name = "life_form", value = "life_form.csv",
row.names = FALSE, header = TRUE)
library(RSQLite)
library(DBI)
library(sqldf)
## extract the home directory
home_dir<-getwd()
## set the working directory
setwd("test_trait_database")
## make a new folder to test R creating databases in
# system("mkdir testing_R_db")
## reset the working directory
setwd("testing_R_db")
db <- dbConnect(SQLite(), dbname="Test.species.sqlite")
dbWriteTable(conn = db, name = "life_form", value = "life_form.csv",
row.names = FALSE, header = TRUE)
dbWriteTable(conn = db, name = "family", value = "family.csv",
row.names = FALSE, header = TRUE)
dbWriteTable(conn = db, name = "invasive", value = "invasive.csv",
row.names = FALSE, header = TRUE)
dbWriteTable(conn = db, name = "species", value = "species.csv",
row.names = FALSE, header = TRUE)
dbWriteTable(conn = db, name = "genus", value = "genus.csv",
row.names = FALSE, header = TRUE)
dbWriteTable(conn = db, name = "habit", value = "habit.csv",
row.names = FALSE, header = TRUE)
dbListTables(db)
dbGetQuery(db, "SELECT * FROM species CROSS JOIN genus WHERE family = 'Asteraceae' ")
dbGetQuery(db, "SELECT * FROM species CROSS JOIN family WHERE family = 'Asteraceae' ")
dbGetQuery(db, "SELECT * FROM species CROSS JOIN family WHERE family = 'asteraceae' ")
dbGetQuery(db, "SELECT * FROM species CROSS JOIN family WHERE family = 'compositae' ")
dbGetQuery(db, "SELECT genus FROM species CROSS JOIN family WHERE family = 'compositae' ")
dbGetQuery(db, "SELECT * FROM genus CROSS JOIN family WHERE family = 'compositae' ")
dbGetQuery(db, "SELECT * FROM genus UNION family")
dbGetQuery(db, "SELECT * FROM genus UNION SELECT * FROM family")
dbGetQuery(db, "SELECT * FROM genus UNION SELECT * FROM species")
dbGetQuery(db, "SELECT * FROM genus JOIN family")
source('/data/Dropbox/Mayfield Lab/FunctionalTraitDatabase/SQLite_Database/test.making.species.db.R', echo=TRUE)
dbGetQuery(db, "SELECT * FROM genus JOIN species")
dbGetQuery(db, "SELECT * FROM genus INNER JOIN species")
dbGetQuery(db, "SELECT * FROM genus INNER JOIN species on genus.genus.id = species.species.id")
dbGetQuery(db, "SELECT * FROM genus INNER JOIN species on genus.genus_id = species.species_id")
dbGetQuery(db, "SELECT * FROM genus INNER JOIN species ON species.genus_id = genus.species_id")
dbGetQuery(db, "SELECT * FROM genus INNER JOIN species ON species.genus_id = genus.genus_id")
dbGetQuery(db, "SELECT * FROM genus CROSS JOIN family WHERE family = 'compositae' ")
dbGetQuery(db, "SELECT * FROM genus INNER JOIN family WHERE family = 'compositae' ")
dbGetQuery(db, "SELECT * FROM genus INNER JOIN family WHERE family.family = 'compositae' ")
dbGetQuery(db, "SELECT * FROM genus JOIN family WHERE family.family = 'compositae' ")
dbGetQuery(db, "SELECT * FROM genus INNER JOIN species ON species.genus_id = genus.genus_id")
dbGetQuery(db, "SELECT * FROM genus,invasive INNER JOIN species ON species.genus_id = genus.genus_id, species.invasive_id = invasive.invasive_id")
dbGetQuery(db, "SELECT * FROM genus,invasive INNER JOIN species ON species.genus_id = genus.genus_id AND species.invasive_id = invasive.invasive_id")
HH<-dbGetQuery(db, "SELECT * FROM genus,invasive INNER JOIN species ON species.genus_id = genus.genus_id AND species.invasive_id = invasive.invasive_id")
HH
HH<-dbGetQuery(db, "SELECT * FROM genus,invasive LEFT OUTER JOIN species ON species.genus_id = genus.genus_id AND species.invasive_id = invasive.invasive_id")
HH
HH<-dbGetQuery(db, "SELECT * FROM genus,invasive LEFT INNER JOIN species ON species.genus_id = genus.genus_id AND species.invasive_id = invasive.invasive_id")
HH<-dbGetQuery(db, "SELECT * FROM genus,invasive RIGHT OUTER JOIN species ON species.genus_id = genus.genus_id AND species.invasive_id = invasive.invasive_id")
HH<-dbGetQuery(db, "SELECT * FROM genus,invasive OUTER JOIN species ON species.genus_id = genus.genus_id AND species.invasive_id = invasive.invasive_id")
HH<-dbGetQuery(db, "SELECT * FROM genus,invasive INNER JOIN species ON species.genus_id = genus.genus_id AND species.invasive_id = invasive.invasive_id")
HH<-dbGetQuery(db, "SELECT * FROM genus,invasive INNER RIGHT JOIN species ON species.genus_id = genus.genus_id AND species.invasive_id = invasive.invasive_id")
HH<-dbGetQuery(db, "SELECT * FROM genus,invasive RIGHT JOIN species ON species.genus_id = genus.genus_id AND species.invasive_id = invasive.invasive_id")
HH<-dbGetQuery(db, "SELECT * FROM genus,invasive INNER JOIN species ON species.genus_id = genus.genus_id AND species.invasive_id = invasive.invasive_id")
HH
class(HH)
class(HH)
grep(names(HH),"_id")
grep("id",names(HH))
HH.sub<-HH[,-grep("id",names(HH))]
HH.sub
