"Brachyscome.iberidifolia", "Calandrinia.eremaea",
"Ceratogyne.obionoides","Crassula.sp",
"Gnephosis.tenuissima","Gonocarpus.nodulosus",
"Goodenia.sp","Hyalosperma.demissum",
"Hydrocotyle.pilifera" ,"Lawrencella.rosea",
"Lobelia.gibbosa" ,"Rhodanthe.manglesii",
"Nicotiana.rotundifolia","Phyllangium.sulcatum",
"Podolepis.lessonii","Podotheca.angustifolia",
"Podotheca.gnaphalioides","Poranthera.microphylla",
"Rhodanthe.citrina","Rhodanthe.laevis",
"Trachymene.cyanopetala","Trachymene.ornata",
"Trachymene.pilosa","Triglochin.isingiana",
"Wahlenbergia.gracilenta","Waitzia.acuminata")
native.p.grass<-c("Austrostipa.elegantissima","Neurachne.alopecuroidea")
exotic.a.forb<-c("Arctotheca.calendula","Brassica.tournefortii",
"Hypochaeris.glabra","Parentucellia.latifolia",
"Lysimachia.arvensis","Oxalis.sp",
"Petrorhagia.dubia","Ursinia.anthemoides",
"Zaluzianskya.divaricata")
exotic.a.grass<-c("Aira.caryophylla","Ehrharta.longiflora",
"Avena.barbata","Pentaschistis.airoides",
"Briza.maxima","Bromus.rubens",
"Vulpia.bromoides","Vulpia.sp")
for (b in 1:length(fecundity.data2[,5])) {
#print(paste0("Row_",b))
count.col<-vector()
native.p.grass.sum<-vector()
native.p.forb.sum<-vector()
native.a.forb.sum<-vector()
exotic.a.grass.sum<-vector()
exotic.a.forb.sum<-vector()
# for each row pull out the competitors as a subset dataframe
for (i in seq) {
if (fecundity.data2[b,i]>0) {
count.col<-append(count.col,i)
}
}
sub.df<-fecundity.data2[b,c(1,count.col)]
## for more than one interaction
#print(paste0("Focal_",sub.df$focal[1]))
for (h in 2:ncol(sub.df)) {
if (as.character(colnames(sub.df)[h]) %in% native.p.grass) {
native.p.grass.sum<-append(native.p.grass.sum,sub.df[1,h])
}
else if (as.character(colnames(sub.df)[h]) %in% native.p.forb) {
native.p.forb.sum<-append(native.p.forb.sum,sub.df[1,h])
}
else if (as.character(colnames(sub.df)[h]) %in% native.a.forb) {
native.a.forb.sum<-append(native.a.forb.sum,sub.df[1,h])
}
else if (as.character(colnames(sub.df)[h]) %in% exotic.a.grass) {
exotic.a.grass.sum<-append(exotic.a.grass.sum,sub.df[1,h])
}
else if (as.character(colnames(sub.df)[h]) %in% exotic.a.forb) {
exotic.a.forb.sum<-append(exotic.a.forb.sum,sub.df[1,h])
}
}
native.p.grass.mn<-sum(native.p.grass.sum)
native.p.forb.mn<-sum(native.p.forb.sum)
native.a.forb.mn<-sum(native.a.forb.sum)
exotic.a.forb.mn<-sum(exotic.a.forb.sum)
exotic.a.grass.mn<-sum(exotic.a.grass.sum)
fecundity.data2$native.p.grass[b]<-native.p.grass.mn
fecundity.data2$native.p.forb[b]<-native.p.forb.mn
fecundity.data2$native.a.forb[b]<-native.a.forb.mn
fecundity.data2$exotic.a.forb[b]<-exotic.a.forb.mn
fecundity.data2$exotic.a.grass[b]<-exotic.a.grass.mn
#x.name<-as.character(sub.df$focal[1]) %in% colnames(sub.df)
#print(paste0("x.name=",x.name))
}
###############################################3
###############################################################
########## functoinal groups X exotic native #################
fam.list<-list()
fam.list[["asparagaceae"]]<-c("Thysanotus.rectantherus")
fam.list[["goodeniaceae"]]<-c("Goodenia.sp")
fam.list[["phyllanthaceae"]]<-c("Phyllangium.sulcatum")
fam.list[["lobeliaceae"]]<-c("Lobelia.gibbosa")
fam.list[["loganiaceae"]]<-c("Poranthera.microphylla")
fam.list[["juncaginaceae"]]<-c("Triglochin.isingiana")
fam.list[["campanulaceae"]]<-c("Wahlenbergia.gracilenta")
fam.list[["haloragaceae"]]<-c("Gonocarpus.nodulosus")
fam.list[["portulaceae"]]<-c("Calandrinia.eremaea")
fam.list[["crassulaceae"]]<-c("Crassula.sp")
fam.list[["solanaceae"]]<-c("Nicotiana.rotundifolia")
fam.list[["brassicaeae"]]<-c("Brassica.tournefortii")
fam.list[["orobanchaceae"]]<-c("Parentucellia.latifolia")
fam.list[["oxalidaceae"]]<-c("Oxalis.sp")
fam.list[["carophyllaceae"]]<-c( "Petrorhagia.dubia")
fam.list[["primulaceae"]]<-c("Lysimachia.arvensis")
fam.list[["scrophulariaceae"]]<-c("Zaluzianskya.divaricata")
fam.list[["araliaceae"]]<-c("Hydrocotyle.pilifera","Trachymene.cyanopetala",
"Trachymene.ornata","Trachymene.pilosa")
fam.list[["poaceae"]]<-c("Austrostipa.elegantissima","Aira.caryophylla",
"Avena.barbata","Pentaschistis.airoides",
"Briza.maxima","Bromus.rubens",
"Vulpia.bromoides","Vulpia.sp",
"Neurachne.alopecuroidea","Ehrharta.longiflora")
fam.list[["asteraceae"]]<-c("Arctotheca.calendula","Ursinia.anthemoides",
"Hypochaeris.glabra","Brachyscome.iberidifolia",
"Hyalosperma.demissum", "Podolepis.lessonii",
"Podotheca.angustifolia","Podotheca.gnaphalioides",
"Rhodanthe.citrina","Rhodanthe.laevis",
"Waitzia.acuminata","Rhodanthe.manglesii",
"Lawrencella.rosea", "Ceratogyne.obionoides",
"Blennospora.drummondii", "Gnephosis.tenuissima")
families<-names(fam.list)
for (f in families) {
fecundity.data2[,paste0(f)]<-0
}
#####################################
for (b in 1:length(fecundity.data2[,5])) {
#print(paste0("Row_",b))
count.col<-vector()
fam.count.list<-list()
# for each row pull out the competitors as a subset dataframe
for (i in seq) {
if (fecundity.data2[b,i]>0) {
count.col<-append(count.col,i)
}
}
sub.df<-fecundity.data2[b,c(1,count.col)]
## for more than one interaction
#print(paste0("Focal_",sub.df$focal[1]))
for (h in 2:ncol(sub.df)) {
for (f in families) {
if (as.character(colnames(sub.df)[h]) %in% fam.list[[f]]) {
fam.count.list[[f]]<-append(fam.count.list[[f]],sub.df[1,h])
} else {
fam.count.list[[f]]<-0
}
}
fam.sum.list<-list()
for (f in families) {
fam.sum.list[[f]]<-sum(fam.count.list[[f]])
}
#print(x)
#x.name<-as.character(sub.df$focal[1]) %in% colnames(sub.df)
#print(paste0("x.name=",x.name))
}
for (f in families) {
fecundity.data2[b,paste0(f)]<-fam.sum.list[[f]]
}
}
###############################################################
######## add back on the solo plants
names(fecundity.data2)
fecundity.solo$Biii<-0
fecundity.solo$Biij<-0
fecundity.solo$Bijj<-0
fecundity.solo$Bijk<-0
fecundity.solo$exotic<-0
fecundity.solo$native<-0
fecundity.solo$grass<-0
fecundity.solo$forb<-0
fecundity.solo$native.p.grass<-0
fecundity.solo$native.p.forb<-0
fecundity.solo$native.a.forb<-0
fecundity.solo$exotic.a.forb<-0
fecundity.solo$exotic.a.grass<-0
for (f in families) {
fecundity.solo[,paste0(f)]<-0
}
fecundity.data.all<-rbind(fecundity.data2,fecundity.solo)
data.list[["num.comp.sp"]]<-fecundity.data.all[,c("focal","seeds","quadrat","site","num.competitor.sp")]
data.list[["total.num.comp"]]<-fecundity.data.all[,c("focal","seeds","quadrat","site","total.num.competitor")]
data.list[["comp.comb"]]<-fecundity.data.all[,c("focal","seeds","quadrat","site","Aii","Aij","Biii","Biij","Bijj","Bijk")]
data.list[["G.F"]]<-fecundity.data.all[,c("focal","seeds","quadrat","site","grass","forb")]
data.list[["E.N"]]<-fecundity.data.all[,c("focal","seeds","quadrat","site","native","exotic")]
data.list[["functional"]]<-fecundity.data.all[,c("focal","seeds","quadrat","site","native.p.grass","native.p.forb","native.a.forb","exotic.a.grass","exotic.a.forb")]
data.list[['families']]<-fecundity.data.all[,c("focal","seeds","quadrat","site",families)]
##############################################################
types.AB<-c("comp.comb","G.F","E.N","functional","families")
#types.AB<-c("families")
types.A<-c("num.comp.sp","total.num.comp","comp.comb","G.F","E.N","functional","families")
############################################################################
################### To run model ##################################################
###################################################################################
####### Alphas and Betas focal ######################################################
#####################################################################################
# source model (this is the best fitting of the HOI models so far...)
source("fecundity.model.NEW.A.focal.B.R")
source("fecundity.model.NEW.AB.focal.B.R")
source("fecundity.model.NEW.NA.part.focal.B.R")
# you should specify here how many 'different' models to fit
# I'd suggest no less than 250 when running in earnest and maybe even greater than 1000 if it doesn't crash your machine :)
### THIS IS MUCH SLOWER THAN BEFORE!!! 10 samples took 18 mins!!!!
# you should specify here how many 'different' models to fit
# I'd suggest no less than 250 when running in earnest and maybe even greater than 1000 if it doesn't crash your machine :)
nsamples <- 2
model.list<-list()
avg.model.list<-list()
sum<-data.frame(Model=as.character(rep("A",18)),coef=rep(0,18),AIC=rep(0,18))
sum$Model<-as.character(sum$Model)
b<-1
# beta flag
beta<-T
for (t in types.AB) {
print(t)
fecundity.data<-data.list[[t]]
if(prlll){
alpha.models.AB <- foreach(i=1:nsamples) %dopar% {
fecundity.model(fecundity.data, fit.alphas=TRUE, fit.betas=FALSE)
}
}else{
alpha.models.AB <- foreach(i=1:nsamples) %do% {
fecundity.model(fecundity.data, fit.alphas=TRUE, fit.betas=FALSE)
}
}
##
if (beta==T) {
if(prlll){
alpha.beta.models.AB <- foreach(i=1:nsamples) %dopar% {
fecundity.model(fecundity.data, fit.alphas=TRUE, fit.betas=TRUE)
}
}else{
alpha.beta.models.AB <- foreach(i=1:nsamples) %do% {
fecundity.model(fecundity.data, fit.alphas=TRUE, fit.betas=TRUE)
}
}
}
##
model.list[[t]]<-alpha.models.AB
alpha.model.AB <- model.avg(alpha.models.AB)
avg.model.list[[t]]<-alpha.model.AB
##
if (beta==T) {
model.list[[paste0(t,".beta")]]<-alpha.beta.models.AB
alpha.beta.model.AB <- model.avg(alpha.beta.models.AB)
avg.model.list[[paste0(t,"beta")]]<-alpha.beta.model.AB
}
##
# print the AIC values for models
sum$Model[b]<-paste0("model.",t)
sum$coef[b]<-length(coef(alpha.models.AB[[1]]))
sum$AIC[b]<-AIC(alpha.models.AB[[1]])
sum$likeli[b]<-logLik(alpha.models.AB[[1]])
sum$R2[b] <- 1 - (alpha.models.AB[[1]]$deviance/alpha.models.AB[[1]]$null.deviance)
b<-b+1
#rm(alpha.models.AB)
##
if (beta==T){
sum$Model[b]<-paste0("model.beta.",t)
sum$coef[b]<-length(coef(alpha.beta.models.AB[[1]]))
sum$AIC[b]<-AIC(alpha.beta.models.AB[[1]])
sum$likeli[b]<-logLik(alpha.beta.models.AB[[1]])
sum$R2[b] <- 1 - (alpha.beta.models.AB[[1]]$deviance/alpha.beta.models.AB[[1]]$null.deviance)
b<-b+1
#rm(alpha.beta.models.AB)
}
##
}
###################
#save.image("Comp.ID.RData")
#write.csv(sum,"comp.id.summary.csv")
summary(model.list[[1]])
summary(model.list[[1]][[1]])
summary(model.list[[1]][[2]])
summary(model.list[[2]][[1]])
types.AB<-c("G.F","E.N","functional","families")
source("fecundity.model.NEW.AB.focal.B.R")
# you should specify here how many 'different' models to fit
# I'd suggest no less than 250 when running in earnest and maybe even greater than 1000 if it doesn't crash your machine :)
nsamples <- 2
model.list<-list()
avg.model.list<-list()
sum<-data.frame(Model=as.character(rep("A",18)),coef=rep(0,18),AIC=rep(0,18))
sum$Model<-as.character(sum$Model)
b<-1
# beta flag
beta<-T
for (t in types.AB) {
print(t)
fecundity.data<-data.list[[t]]
if(prlll){
alpha.models.AB <- foreach(i=1:nsamples) %dopar% {
fecundity.model(fecundity.data, fit.alphas=TRUE, fit.betas=FALSE)
}
}else{
alpha.models.AB <- foreach(i=1:nsamples) %do% {
fecundity.model(fecundity.data, fit.alphas=TRUE, fit.betas=FALSE)
}
}
##
if (beta==T) {
if(prlll){
alpha.beta.models.AB <- foreach(i=1:nsamples) %dopar% {
fecundity.model(fecundity.data, fit.alphas=TRUE, fit.betas=TRUE)
}
}else{
alpha.beta.models.AB <- foreach(i=1:nsamples) %do% {
fecundity.model(fecundity.data, fit.alphas=TRUE, fit.betas=TRUE)
}
}
}
##
model.list[[t]]<-alpha.models.AB
alpha.model.AB <- model.avg(alpha.models.AB)
avg.model.list[[t]]<-alpha.model.AB
##
if (beta==T) {
model.list[[paste0(t,".beta")]]<-alpha.beta.models.AB
alpha.beta.model.AB <- model.avg(alpha.beta.models.AB)
avg.model.list[[paste0(t,"beta")]]<-alpha.beta.model.AB
}
##
# print the AIC values for models
sum$Model[b]<-paste0("model.",t)
sum$coef[b]<-length(coef(alpha.models.AB[[1]]))
sum$AIC[b]<-AIC(alpha.models.AB[[1]])
sum$likeli[b]<-logLik(alpha.models.AB[[1]])
sum$R2[b] <- 1 - (alpha.models.AB[[1]]$deviance/alpha.models.AB[[1]]$null.deviance)
b<-b+1
#rm(alpha.models.AB)
##
if (beta==T){
sum$Model[b]<-paste0("model.beta.",t)
sum$coef[b]<-length(coef(alpha.beta.models.AB[[1]]))
sum$AIC[b]<-AIC(alpha.beta.models.AB[[1]])
sum$likeli[b]<-logLik(alpha.beta.models.AB[[1]])
sum$R2[b] <- 1 - (alpha.beta.models.AB[[1]]$deviance/alpha.beta.models.AB[[1]]$null.deviance)
b<-b+1
#rm(alpha.beta.models.AB)
}
##
}
###################
#save.image("Comp.ID.RData")
#write.csv(sum,"comp.id.summary.csv")
model.list[[1]][[1]]
sumary(model.list[[1]][[1]])
summary(model.list[[1]][[1]])
summary(model.list[[2]][[1]])
summary(model.list[[3]][[1]])
summary(model.list[[4]][[1]])
summary(model.list[[5]][[1]])
summary(model.list[[6]][[1]])
setwd("/home/uqtmart7/Documents")
data<-read.csv(file.choose())
rm(list=ls())
setwd("/home/uqtmart7/data/Dropbox/Mayfield Lab/FunctionalTraitDatabase/Projects/SURV1/RAW")
raw<-read.csv('quadrat_scale_data_april_June_2017.csv')
setwd("/home/uqtmart7/data/Dropbox/Mayfield Lab/FunctionalTraitDatabase/Projects/SURV1/RAW")
raw<-read.csv('quadrat_scale_data_april_June_2017.csv')
raw<-read.csv('quadrat_scale_data_June_2017.csv')
######################################
#### Code written by Trace Martyn ####
#### Version 1: 15-06-2017        ####
######################################
# clear workspace
rm(list=ls())
##### Cleaning code for SURV1 ####
### set working directory
setwd("/home/uqtmart7/data/Dropbox/Mayfield Lab/FunctionalTraitDatabase/Projects/SURV1/RAW")
raw<-read.csv('quadrat_scale_data_June_2017.csv')
# list all sites
sites<-unique(raw$remnant)
## projects dataframe
projects<-data.frame(project_id=1,researcher="JohnDwyer",email="j.dwyer2@uq.edu.au",study_sites=paste(sites,collapse="_"))
# list all years
years<-unique(raw$year)
## field_season dataframe
field_season<-data.frame(field_season_id=c(1,2),project_id=1,year=years,crew=c("JohnDwyer","JohnDwyer_ClaireWainwright"))
## site dataframe
site<-data.frame(site_id=seq(1,length(sites)),site=sites,area=0,units="ha",lat=0,long=0,max_temp=0,min_temp=0,ann_precip=0)
## treatment dataframe
treatment<-data.frame(treatment_id=c(1,2),treatment=c("Edge","Interior"))
## make plot dataframe
# make smaller dataframe without extranious values for plot dataframe
raw.plot<-data.frame(year=raw$year,site=raw$remnant,block=raw$site,plot=raw$quadrat, edge=raw$edge)
# remove duplicate values
raw.plot<-raw.plot[!duplicated(raw.plot),]
# add treatment values - match the edge code (0,1) to treatment code listed above (1,2)
raw.plot$treatment<-unlist(lapply(raw.plot$edge, function (x) replace (x,x==1,2)))
raw.plot$treatment<-unlist(lapply(raw.plot$treatment, function (x) replace (x,x==0,1)))
# match site name with site_id above
raw.plot<-merge(raw.plot,site[,c("site_id","site")],by="site")
# match field season year with field_season_id above
raw.plot<-merge(raw.plot,field_season[,c("field_season_id","year")],by="year")
# sort the dataframe so it is easy to compare to original 'raw'
raw.plot<-raw.plot[order(raw.plot$field_season_id,raw.plot$site_id,raw.plot$block,raw.plot$plot,raw.plot$edge),]
# plot dataframe
plot<-data.frame(plot_id=seq(1,length(raw.plot$plot)),field_season_id=raw.plot$field_season_id,site_id=raw.plot$site_id,block=raw.plot$block,treatment_id=raw.plot$treatment)
###########################3
## make trait summary dataframe
# read in raw trait data (this is actually only average data - will get actual individual data from John on Monday June 19 2017)
raw.trait<-read.csv("species_in_quadrat_scale_data_June_2017.csv")
# add field_season_id from above
raw.trait<-merge(raw.trait,field_season[,c("year","field_season_id")],"year")
# split the large dataframe by field_season_id incase there are different traits for different seasons
raw.trait.fs.1<-na.omit(raw.trait[which(raw.trait$field_season_id==1),])
raw.trait.fs.2<-na.omit(raw.trait[which(raw.trait$field_season_id==2),])
# visually insepect which column headers are traits
head(raw.trait.fs.1)
head(raw.trait.fs.2)
# extract column names for trait values
trait.col.names.1<-colnames(raw.trait.fs.1)[8:30]
trait.col.names.2<-colnames(raw.trait.fs.2)[8:30]
# make trait dataframe
#list of traits = paste in column headers without the "." and then all merged into one string separted by "_"
trait_summary<-data.frame(field_season_id=c(1,2),traits=c(paste(gsub("\\.","",trait.col.names.1),collapse = "_"),paste(gsub("\\.","",trait.col.names.2),collapse = "_")))
#####################
## write out csv's
setwd("/home/uqtmart7/data/Dropbox/Mayfield Lab/FunctionalTraitDatabase/Projects/SURV1/CLEAN")
write.csv(projects,"projects.csv",row.names=F)
write.csv(field_season,"field_season.csv",row.names=F)
write.csv(site,"site.csv",row.names=F)
write.csv(treatment,"treatment.csv",row.names=F)
write.csv(plot,"plot.csv",row.names=F)
write.csv(trait_summary,"trait_summary.csv",row.names = F)
###########################
?match
species %in% raw.trait$species
species<-c("Aira.caryophylla",
"Avena.barbata",
"Briza.maxima","Bromus.rubens",
"Ehrharta.longiflora",
"Pentaschistis.airoides",
"Vulpia.bromoides","Vulpia.sp", "Austrostipa.elegantissima",
"Blennospora.drummondii",
"Brachyscome.iberidifolia", "Calandrinia.eremaea",
"Ceratogyne.obionoides","Crassula.sp",
"Gnephosis.tenuissima","Gonocarpus.nodulosus",
"Goodenia.sp","Hyalosperma.demissum",
"Hydrocotyle.pilifera" ,"Lawrencella.rosea",
"Lobelia.gibbosa" ,"Neurachne.alopecuroidea",
"Nicotiana.rotundifolia","Phyllangium.sulcatum",
"Podolepis.lessonii","Podotheca.angustifolia",
"Podotheca.gnaphalioides","Poranthera.microphylla",
"Rhodanthe.citrina","Rhodanthe.laevis",
"Rhodanthe.manglesii","Thysanotus.rectantherus",
"Trachymene.cyanopetala","Trachymene.ornata",
"Trachymene.pilosa","Triglochin.isingiana",
"Wahlenbergia.gracilenta","Waitzia.acuminata",
"Brassica.tournefortii","Hypochaeris.glabra",
"Lysimachia.arvensis","Oxalis.sp",
"Petrorhagia.dubia","Ursinia.anthemoides",
"Zaluzianskya.divaricata","Parentucellia.latifolia",
"Arctotheca.calendula")
species %in% raw.trait$species
raw.trait$species %in% species
species %in% raw.trait$species
trace.trait<-raw.trait[which(raw.trait$species %in% species),]
head(trace.trait)
unique(raw.trait$species)
aggregate(raw.trait$species, by=list(raw.trait$remnant))
aggregate(raw.trait$species, by=list(raw.trait$remnant), FUN=sum)
aggregate(raw.trait$species, by=list(raw.trait$remnant), FUN=unqiue)
aggregate(raw.trait$species, by=list(raw.trait$remnant), FUN=unique)
aggregate(raw.trait$species, by=list(raw.trait$remnant), FUN=summary)
?aggregate
seed.mass<-aggregate(raw.trait$mean.seed.mass, by=list(raw.trait$remnant,raw.trait$species),FUN=mean)
seed.mass
seed.mass<-aggregate(raw.trait$mean.seed.mass, by=list(raw.trait$species,raw.trait$remnant),FUN=mean)
seed.mass
seed.mass<-na.omit(aggregate(raw.trait$mean.seed.mass, by=list(raw.trait$species,raw.trait$remnant),FUN=mean))
seed.mass
head(raw.trait)
unlist(strsplit(raw.trait$life.form,".",2))
unlist(strsplit(as.character(raw.trait$life.form),".",2))
unlist(strsplit(as.character(raw.trait$life.form),".",fixed=T))
strsplit(as.character(raw.trait$life.form),".",fixed=T)
data.frame(do.call(strsplit(as.character(raw.trait$life.form),".",fixed=T)))
data.frame(do.call("rbind",strsplit(as.character(raw.trait$life.form),".",fixed=T)))
data.frame(do.call("rbind",strsplit(as.character(raw.trait$life.form),".",2,fixed=T)))
data.frame(do.call("rbind",strsplit(as.character(raw.trait$life.form),".",fixed=T)))
data.frame(do.call("rbind",strsplit(as.character(raw.trait$life.form),".")))
data.frame(do.call("rbind",strsplit(as.character(raw.trait$life.form),".",2)))
install.packages('tidyr')
library(tidyr)
separate(data = raw.trait, col = list.form, into = c("life", "habit"), sep = "\\.")
separate(data = raw.trait, col = list.form, into = c("life", "habit"), sep = ".")
?separate
separate(data = raw.trait, col = list.form, into = c("life", "habit"), sep = ".")
class(raw.trait$life.form)
raw.trait$life.form<-as.factor(raw.trait$life.form)
separate(data = raw.trait, col = list.form, into = c("life", "habit"), sep = ".")
traceback()
separate(data = raw.trait, col = list.form, sep = ".")
separate(data = raw.trait, col = life.form, into = c("life", "habit"), sep = ".")
raw.trait$life.form<-as.character(raw.trait$life.form)
separate(data = raw.trait, col = life.form, into = c("life", "habit"), sep = ".")
separate(data = raw.trait, col = life.form, into = c("life", "habit"), sep = ".",remove=F)
traceback()
separate(data = raw.trait, col = life.form, into = c("life", "habit"), sep = ".",remove=F, convert=F)
separate(data = raw.trait, col = life.form, into = c("life", "habit"), sep = "\\.",remove=F)
unique(raw.trait$life.form)
unique(raw.trait$habit)
x<-separate(data = raw.trait, col = life.form, into = c("life", "habit"), sep = "\\.",remove=F)
unique(rx$habit)
uniquex$habit)
unique(x$habit)
unique(x$life)
x<-separate(data = raw.trait, col = life.form, into = c("root","life", "habit"), sep = "\\.",remove=F)
unique(x$life)
unique(x$life)
x<-separate(data = raw.trait, col = life.form, into = c("root","life", "habit"), sep = "\\.",remove=F)
str_split_fixed(raw.trait$life.form,".")
library(stringr)
str_split_fixed(raw.trait$life.form,".")
?str_split_fixed
str_split_fixed(raw.trait$life.form,".",n=3)
str_split_fixed(raw.trait$life.form,pattern=".",n=3)
str_split_fixed(as.character(raw.trait$life.form),pattern=".",n=3)
strsplit(raw.trait$life.form,".")
?strsplit
strsplit(raw.trait$life.form,"\\.")
str_split_fixed(as.character(raw.trait$life.form),pattern="\\.",n=3)
str_split_fixed(as.character(raw.trait$life.form),pattern="\\.",n=3)
xx<-str_split_fixed(as.character(raw.trait$life.form),pattern="\\.",n=3)
xx[,3]
unique(xx[,3])
